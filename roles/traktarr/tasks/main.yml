#########################################################################
# Title:         Saltbox: Traktarr Role                                 #
# Author(s):     l3uddz, desimaniac                                     #
# URL:           https://github.com/saltyorg/Saltbox                    #
# --                                                                    #
#########################################################################
#                   GNU General Public License v3.0                     #
#########################################################################
---
- name: Check if traktarr service exists
  ansible.builtin.stat:
    path: "/etc/systemd/system/traktarr.service"
  register: traktarr_service

- name: Stop existing traktarr service
  ansible.builtin.systemd:
    state: stopped
    name: traktarr
  when: traktarr_service.stat.exists

- name: Create traktarr directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ user.name }}"
    group: "{{ user.name }}"
    mode: 0775
    recurse: yes
  with_items:
    - /opt/traktarr

- name: Clone traktarr
  ansible.builtin.git:
    repo: https://github.com/l3uddz/traktarr.git
    dest: /opt/traktarr
    version: HEAD
    force: true
  become: true
  become_user: "{{ user.name }}"

- name: Install pip requirements
  ansible.builtin.pip:
    requirements: /opt/traktarr/requirements.txt
    executable: pip3

- name: Check if traktarr config exists
  ansible.builtin.stat:
    path: "/opt/traktarr/config.json"
  register: traktarr_config

- name: "Check if sonarr exists"
  ansible.builtin.stat:
    path: "/opt/sonarr/config.xml"
  register: sonarr_config
  when: not traktarr_config.stat.exists

- name: "When sonarr exists, add api key to traktar config"
  block:

    - name: Pull sonarr api key
      community.general.xml:
        path: "/opt/sonarr/config.xml"
        xpath: /Config/ApiKey
        content: text
      register: xmlresp

    - name: Set sonarr api Key
      ansible.builtin.set_fact:
        sonarr_api_key: "{{ xmlresp.matches[0].ApiKey }}"

  when: (not traktarr_config.stat.exists) and (sonarr_config.stat.exists)

- name: "Check if radarr exists"
  ansible.builtin.stat:
    path: "/opt/radarr/config.xml"
  register: radarr_config
  when: not traktarr_config.stat.exists

- name: "When radarr exists, add api key to traktar config"
  block:

    - name: Pull radarr api key
      community.general.xml:
        path: "/opt/radarr/config.xml"
        xpath: /Config/ApiKey
        content: text
      register: xmlresp

    - name: Set radarr api Key
      ansible.builtin.set_fact:
        radarr_api_key: "{{ xmlresp.matches[0].ApiKey }}"

  when: (not traktarr_config.stat.exists) and (radarr_config.stat.exists)

- name: Import default config
  ansible.builtin.template:
    src: config.json.j2
    dest: /opt/traktarr/config.json
    owner: "{{ user.name }}"
    group: "{{ user.name }}"
    mode: "0775"
    force: true
  when: not traktarr_config.stat.exists

- name: Set traktarr.py as executable
  ansible.builtin.file:
    path: /opt/traktarr/traktarr.py
    owner: "{{ user.name }}"
    group: "{{ user.name }}"
    mode: a+x

- name: Set directory permissions
  ansible.builtin.file:
    path: "/opt/traktarr"
    state: directory
    owner: "{{ user.name }}"
    group: "{{ user.name }}"
    recurse: true
    mode: "0775"

- name: "Create /usr/local/bin symlink"
  ansible.builtin.file:
    src: "/opt/traktarr/traktarr.py"
    dest: "/usr/local/bin/traktarr"
    state: link

- name: Import traktarr service
  ansible.builtin.template:
    src: traktarr.service.j2
    dest: /etc/systemd/system/traktarr.service
    mode: "0664"
    force: true
  when: not traktarr_service.stat.exists

- name: Load traktarr service
  ansible.builtin.systemd:
    name: traktarr
    state: "{{ traktarr_config.stat.exists | ternary('started','stopped') }}"
    enabled: "{{ traktarr_config.stat.exists | ternary('yes','no') }}"
    daemon_reload: true
