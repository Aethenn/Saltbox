#########################################################################
# Title:         Saltbox: Restore Role                                  #
# Author(s):     l3uddz, desimaniac                                     #
# URL:           https://github.com/saltyorg/Saltbox                    #
# --                                                                    #
#########################################################################
#                   GNU General Public License v3.0                     #
#########################################################################
---
- name: "Check if user '{{ user.name }}' exists"
  shell: "id -un {{ user.name }} >/dev/null 2>&1;"
  register: user_check
  failed_when: (user_check.rc > 1)

- name: User Role
  include_role:
    name: user
  when: (user_check.rc == 1)

- name: Set shell
  include_role:
    name: shell
  when: (user_check.rc == 1)

- name: Variables
  import_tasks: "variables.yml"

- name: "Check if 'localhost.yml' exists in '{{ playbook_dir }}'"
  stat:
    path: "{{ playbook_dir }}/localhost.yml"
  register: localhost_yml_playbook_dir

- name: "Import 'localhost.yml' from '{{ playbook_dir }}'"
  block:

    - name: "Check if a previous 'localhost.yml' exists"
      stat:
        path: "/srv/git/saltbox/inventories/host_vars/localhost.yml"
      register: localhost_yml_default_path

    - name: "Backup previous 'localhost.yml' (if it exists)"
      copy:
        src: "/srv/git/saltbox/inventories/host_vars/localhost.yml"
        dest: "/srv/git/saltbox/inventories/host_vars/localhost.yml.bak"
        owner: "{{ user.name }}"
        group: "{{ user.name }}"
        mode: "0775"
        force: true
      when: (localhost_yml_default_path.stat.exists)

    - name: "Remove previous 'localhost.yml' (if it exists)"
      file:
        path: "/srv/git/saltbox/inventories/host_vars/localhost.yml"
        state: absent
      when: (localhost_yml_default_path.stat.exists)

    - name: "Import 'localhost.yml' from '{{ playbook_dir }}'"
      copy:
        src: "{{ playbook_dir }}/localhost.yml"
        dest: "/srv/git/saltbox/inventories/host_vars/localhost.yml"
        owner: "{{ user.name }}"
        group: "{{ user.name }}"
        mode: "0775"
        force: true

    - name: "Remove imported 'localhost.yml' from '{{ playbook_dir }}'"
      file:
        path: "{{ playbook_dir }}/localhost.yml"
        state: absent

  when: (localhost_yml_playbook_dir.stat.exists)

- name: BTRFS Tasks
  include_tasks: "btrfs.yml"
  loop:
    - /opt
    - /mnt/local
  loop_control:
    loop_var: outer_item

- name: Create common directories
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ user.name }}"
    group: "{{ user.name }}"
    mode: "0775"
  with_items:
    - /opt
    - /mnt/local

- name: "Create backup location '{{ backup.local.destination }}'"
  file:
    path: "{{ backup.local.destination }}"
    state: directory
    owner: "{{ user.name }}"
    group: "{{ user.name }}"
    mode: "0775"
    recurse: true

- name: "Create backup location '{{ backup.local.destination }}/opt'"
  file:
    path: "{{ backup.local.destination }}/opt"
    state: directory
    owner: "{{ user.name }}"
    group: "{{ user.name }}"
    mode: "0775"
    recurse: true

- name: Check if previous backup exists locally
  find:
    paths: "{{ backup.local.destination }}/opt"
    file_type: file
    patterns: '*.tar'
  register: dir_files

# Restore from remote backup when local backup does not exist
- name: Restore Remote
  import_tasks: "restore_remote.yml"
  when: (dir_files.matched|int == 0)

- name: "Look for 'backup_excludes_list.txt' file in '{{ backup.local.destination }}'"
  stat:
    path: "{{ backup.local.destination }}/backup_excludes_list.txt"
  register: backup_excludes_list

- name: "Copy 'backup_excludes_list.txt' from '{{ backup.local.destination }}'."
  copy:
    src: "{{ backup.local.destination }}/backup_excludes_list.txt"
    dest: "{{ playbook_dir }}"
    owner: "{{ user.name }}"
    group: "{{ user.name }}"
    mode: "0775"
    force: true
  when: (backup_excludes_list.stat.exists)

- name: "Backup existing folders in '/opt' to prevent overwriting them"
  shell: mv '/opt/{{ (item | basename | splitext)[0] }}' '/opt/{{ (item | basename | splitext)[0] }}_bak' 2>/dev/null || true
  args:
    warn: false
  with_fileglob:
    - "{{ backup.local.destination }}/opt/*.tar"
  loop_control:
    label: "'/opt/{{ (item | basename | splitext)[0] }}' --> '/opt/{{ (item | basename | splitext)[0] }}_bak'"

- name: "Unarchive backup tarballs into '/opt'"
  shell: tar -xf '{{ item }}' -C '/opt/'
  args:
    warn: false
  with_fileglob:
    - "{{ backup.local.destination }}/opt/*.tar"
  loop_control:
    label: "'{{ item | basename }}' --> '/opt/{{ (item | basename | splitext)[0] }}'"
  register: unarchive

- name: "Set '/opt' ownership and permissions"
  import_tasks: "permissions.yml"
  tags: opt-permissions-reset

- name: Cleanup backup location
  file:
    path: "{{ backup.local.destination }}"
    state: absent
  become: true
  become_user: "{{ user.name }}"
  when: not (backup.local.enable)

- name: Finished restoring the backup
  debug:
    msg: Finished restoring the backup. You are now ready to install Saltbox!
  when: (unarchive is succeeded)
